#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Apr 29 04:53:32 2019

@author: eatron - Yaser Moazzen - 25,04,2019
This script is for testing txt format bounding box annotations on traffic data
"""

import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.image as mpimg
from PIL import Image
import numpy as np
import cv2
import os
import random
import math

# Paths for images and annotations
Sample_img_PATH="//"
Txt_Annot_PATH="//"

BBDlabeldict = ['bike','bus','car','motor','person/rider','truck']

# find file names to load image and its related annotation which is in txt format
for imname in os.listdir(Sample_img_PATH):
    # image path, excluding unwanted files
    if (imname.split(".")[1] != 'jpg') | ('bbxed' in imname):
        continue
    else:
        impath=Sample_img_PATH+imname

    # Read annotation in text format
    lines = [line.rstrip('\n') for line in open(Txt_Annot_PATH+imname.split(".")[0]+".txt", 'r')]
    
    # Load image
    img = np.array(mpimg.imread(impath))
    #imgplot = plt.imshow(img)

    # finding weight and height of image    
    h, w, ch = img.shape
    
    # Plotting bounding boxes on the images to visualize them
    gt_boxes=[]
    for ind in range(len(lines)):
        label = BBDlabeldict[int(lines[ind].split(" ")[0])]
        cx = float(lines[ind].split(" ")[1])
        cy = float(lines[ind].split(" ")[2])
        ww = float(lines[ind].split(" ")[3])
        hh = float(lines[ind].split(" ")[4]) 
        x = math.floor((cx - ww/2)*w)
        y = math.floor((cy - hh/2)*h)
        ww *=w
        hh*= h
        # Create a Rectangle patch
        #    rect = mpl.patches.Rectangle((x,y),ww,hh,linewidth=2,edgecolor='r',fill=False)
        #    gt_boxes.append(rect)
        #    ax.add_patch(rect)
        cv2.rectangle(img,(x,y),(x+int(ww),y+int(hh)),(0,255,255),5)
        font = cv2.FONT_HERSHEY_SIMPLEX
        cv2.putText(img,label,(x,y-5), font, 0.5,(255,0,255),1,cv2.LINE_AA)
        
    # Plott the image with annotations on it
    # plt.imshow(img)
    
    # making path of save file
    save_file = Sample_img_PATH + imname.split(".")[0] +'_bbxed' + '.jpg'
    # save bbxed image
    mpimg.imsave(save_file, img)
